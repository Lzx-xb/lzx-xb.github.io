const t=JSON.parse('{"key":"v-42041e4b","path":"/posts/javascript/closure.html","title":"闭包(closure)","lang":"en-US","frontmatter":{"title":"闭包(closure)","icon":"edit","date":"2024-06-11T00:00:00.000Z","category":["javascript"],"tag":["closure"],"description":"闭包 概述 闭包是 JavaScript 中一个非常重要且常用的概念。它是指在一个函数内部定义的另一个函数， 该内部函数可以访问其外部函数的作用域（即使外部函数已经执行完毕）。 闭包可以用来创建私有变量、避免全局变量污染、实现封装等。 闭包的特性 函数内部定义函数：闭包是在一个函数内部定义的另一个函数。 函数可以访问其外部函数的变量：内部函数可以访问其外部函数的作用域中的变量。 变量的持久化：外部函数的变量在闭包中会被持久化，不会在外部函数执行完毕后销毁","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://github.com/Lzx-xb/lzx-xb.github.io/zh/posts/javascript/closure.html"}],["meta",{"property":"og:url","content":"https://github.com/Lzx-xb/lzx-xb.github.io/posts/javascript/closure.html"}],["meta",{"property":"og:site_name","content":"漫步人生路"}],["meta",{"property":"og:title","content":"闭包(closure)"}],["meta",{"property":"og:description","content":"闭包 概述 闭包是 JavaScript 中一个非常重要且常用的概念。它是指在一个函数内部定义的另一个函数， 该内部函数可以访问其外部函数的作用域（即使外部函数已经执行完毕）。 闭包可以用来创建私有变量、避免全局变量污染、实现封装等。 闭包的特性 函数内部定义函数：闭包是在一个函数内部定义的另一个函数。 函数可以访问其外部函数的变量：内部函数可以访问其外部函数的作用域中的变量。 变量的持久化：外部函数的变量在闭包中会被持久化，不会在外部函数执行完毕后销毁"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-11T03:58:39.000Z"}],["meta",{"property":"article:author","content":"漫步人生路"}],["meta",{"property":"article:tag","content":"closure"}],["meta",{"property":"article:published_time","content":"2024-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-11T03:58:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包(closure)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-11T03:58:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"漫步人生路\\",\\"url\\":\\"https://liuyuedeyu.top\\"}]}"]]},"headers":[{"level":2,"title":"闭包的特性","slug":"闭包的特性","link":"#闭包的特性","children":[]},{"level":2,"title":"闭包的应用","slug":"闭包的应用","link":"#闭包的应用","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[{"level":3,"title":"释放闭包的几种方法","slug":"释放闭包的几种方法","link":"#释放闭包的几种方法","children":[]}]}],"git":{"createdTime":1718078319000,"updatedTime":1718078319000,"contributors":[{"name":"lzx-xb","email":"321337450@qq.com","commits":1}]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"posts/javascript/closure.md","localizedDate":"June 11, 2024","excerpt":"<h1> 闭包</h1>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">概述</p>\\n<pre><code>闭包是 JavaScript 中一个非常重要且常用的概念。它是指在一个函数内部定义的另一个函数，\\n该内部函数可以访问其外部函数的作用域（即使外部函数已经执行完毕）。\\n闭包可以用来创建私有变量、避免全局变量污染、实现封装等。\\n</code></pre>\\n</div>\\n<h2> 闭包的特性</h2>\\n<ol>\\n<li><strong>函数内部定义函数</strong>：闭包是在一个函数内部定义的另一个函数。</li>\\n<li><strong>函数可以访问其外部函数的变量</strong>：内部函数可以访问其外部函数的作用域中的变量。</li>\\n<li><strong>变量的持久化</strong>：外部函数的变量在闭包中会被持久化，不会在外部函数执行完毕后销毁</li>\\n</ol>","autoDesc":true}');export{t as data};
